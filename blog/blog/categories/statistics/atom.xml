<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: statistics | /usr/sbin/blog]]></title>
  <link href="http://usrsb.in/blog/blog/categories/statistics/atom.xml" rel="self"/>
  <link href="http://usrsb.in/blog/"/>
  <updated>2012-08-12T10:39:34-06:00</updated>
  <id>http://usrsb.in/blog/</id>
  <author>
    <name><![CDATA[Alex Beal]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Did the Boulder PD Reduce Traffic Accidents?]]></title>
    <link href="http://usrsb.in/blog/blog/2012/05/20/did-the-boulder-pd-reduce-traffic-accidents/"/>
    <updated>2012-05-20T09:00:00-06:00</updated>
    <id>http://usrsb.in/blog/blog/2012/05/20/did-the-boulder-pd-reduce-traffic-accidents</id>
    <content type="html"><![CDATA[<p>There's an article I came across a couple of years ago, which I filed away in the back of my brain, concerning the number of traffic accidents in Boulder. The police department increased enforcement at several intersections, and they were optimistic about the results. At all of the intersections, the number of accidents had dropped compared to the number of accidents in the year before.</p>

<p><blockquote><p>The police department's traffic unit decided early last year to step up enforcement around three intersections that consistently rank among the top accident locations in the city...That meant placing more officers in marked cars at the intersection...Compared with 2008, last year saw 14 fewer accidents at those intersections, an 11 percent decrease.</p><footer><strong>The Daily Camera</strong> <cite><a href='http://www.dailycamera.com/ci_14456899'>www.dailycamera.com/ci_14456899/&hellip;</a></cite></footer></blockquote></p>

<p>The box to the left of the article presents the data, which I've reproduced below:</p>

<p>```
Accident data
Intersection            2008    2009</p>

<p>28th and Arapahoe       52      46</p>

<p>30th and Arapahoe       39      33</p>

<p>Foothills and Arapahoe  35      33</p>

<p>Citywide                3,242   3,405</p>

<p>Source: Boulder Police Department
```</p>

<p>As you may have guessed, I was quite skeptical of this article. Just because a random variable varies from experiment to experiment, doesn't mean the variation is anything but coincidence. I just flipped a coin 4 times. The first two times it was heads, and the second two, it was first heads and then tails. That, of course, doesn't mean the coin suddenly became less lucky. So, the question I want to answer in this post is: <em>Is the Boulder PD justified in thinking that they've decreased the number of traffic accidents at these three intersections?</em></p>

<p>The way I'm going to answer this question is to first model these accidents with a probability distribution, and then use this to find the probability that the decrease in accidents could have been due to random variation. The distribution I'm going to use is a really interesting one called the Poisson distribution. This distribution is great for modeling events that happen very rarely, such as shark attacks and traffic accidents. Many people drive every day, but very few (relatively speaking) are involved in an accident. Further, this distribution has one parameter, λ, and both its variance and expected value are equal to it.</p>

<p><img src="http://media.usrsb.in/traffic-poisson/expected-var.png" title="Expected Value and Variance of the Poisson Distribution" ></p>

<p>The issue, of course, is that we don't know the expected value or variance of traffic accidents at these intersections. We can, though, make a charitable assumption. In the interests of some fun mathematics, let's assume that 2008 was an incredibly average year, and that the number of accidents that occurred that year is exactly the expected value. Since the variance is equal to the expected value, we can, for example, say that the variance is 52 for 28th and Arapahoe.</p>

<p>Now that we know the variance and expected value, we can calculate the <em>z-score</em> of the decrease in accidents. This will tell us the probability that the random variable (in this case, the number of accidents at 28th and Arapahoe) could, by mere chance, decrease by 6 to 46. But wait a minute. z-scores only pertain to normal distributions, and we're using the Poisson distribution. This is ok, though. Since λ is large (λ > 25) it can be approximated with the normal distribution.<sup>1</sup> So, let's calculate the z-score:</p>

<p><img src="http://media.usrsb.in/traffic-poisson/z-val.png" title="z-value of the Normal Distribution" ></p>

<p><img src="http://media.usrsb.in/traffic-poisson/z-val-calc.png" title="z-value of the reduction = 0.832" ></p>

<p>We now know that a decrease of 6 accidents from 52 falls at exactly -0.832 standard deviations from the mean. From this, we can tell that <a href="http://www.wolframalpha.com/input/?i=z-score+-0.832">the chance that the number of accidents in a given year would vary between 46 and 58 (±6 from the mean of 52) is 60%,</a> and the chance that the number of accidents would be something less than or equal to 46 is 20%. So, it seems quite likely that this variation was just random coincidence. The Boulder PD is probably being a bit too optimistic in thinking that it's their additional enforcement that decreased the number of traffic accidents at 28th and Arapahoe. Now, what about the other intersections? I've repeated this calculation for the other three statistics below:</p>

<p>```
Accident data
Intersection            2008    2009    z-value     P(z &lt; z-value) (left tailed p-value)</p>

<p>28th and Arapahoe       52      46      -0.832      0.202</p>

<p>30th and Arapahoe       39      33      -0.971      0.1683</p>

<p>Foothills and Arapahoe  35      33      -0.334      0.369</p>

<p>Citywide                3,242   3,405    2.862      0.0021 (right tailed)
```</p>

<p>The decrease at 30th and Arapahoe is slightly more significant, but still has a 17% chance of being due to randomness. Foothills and Arapahoe fairs the worst of the three, with a whopping 37% chance of being random. Ironically, it is the citywide <em>increase</em> in accidents that is the most significant result. There's only a 0.2% chance that the number of accidents would randomly increase by at least 163! This is statistically significant, and it's plausible that this variation isn't due to random chance. Perhaps the Boulder PD spent too much time at these intersections at a cost to all of the other intersections in the city!</p>

<p>In any case, this analysis is, of course, far from perfect. The assumption I made concerning the expected value may very well have been wrong. Perhaps both 2008 and 2009 were anomalous years, and the expected value is actually much different. I will also grant that it is interesting that the citywide total went up, while these three intersections all went down, but I'm also not sure how much cherry picking they did. Really, the point of this post was to showcase some interesting mathematics, and show how far a little algebra can go. With only a little more data, I think this sort of analysis would have some interesting results. Hopefully someone at Boulder PD is listening. I wonder how much more money they threw at this enforcement campaign without really having any good data on its efficacy.</p>

<h3>Notes</h3>

<ol>
<li>Tijms, Henk. Understanding Probability: Chance Rules in Everyday Life. 2nd ed. New York: Cambridge University Press, 2010. 169. Print.</li>
</ol>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Super Bowl Probabilities: The Coin Toss]]></title>
    <link href="http://usrsb.in/blog/blog/2012/02/05/super-bowl-probabilities/"/>
    <updated>2012-02-05T09:53:00-07:00</updated>
    <id>http://usrsb.in/blog/blog/2012/02/05/super-bowl-probabilities</id>
    <content type="html"><![CDATA[<p>Browsing through my Twitter stream, I came across a blog post discussing an allegedly 3.8-sigma event: <a href="http://blogs.discovermagazine.com/cosmicvariance/2012/02/04/a-3-8-sigma-anomaly/">Apparently the last 14 Super Bowl coin tosses have been won by the NFC</a>. What are the chances of this? The blog linked to above claims a probability of (1/2)<sup>13</sup>. Another <a href="http://www.outsidethebeltway.com/super-bowl-coin-flip/">blog</a> claims (1/2)<sup>14</sup>. Which is correct? Before I get into the mathematics, I'll try to disentangle three different questions:</p>

<ol>
<li>Out of 14 tosses, what's the probability that they all come up heads?</li>
<li>Out of 14 tosses, what's the probability that one team wins all of them?</li>
<li>Out of 45 tosses (one for each Super Bowl), what's the probability that one team wins a string of 14 of them?<sup>1</sup></li>
</ol>


<p><strong>(1/2)<sup>14</sup></strong> is the correct answer to question (1). There's a 1 in 2 chance of getting heads. The probability of getting heads 14 times out of 14 tosses is therefore (1/2)<sup>14</sup>.</p>

<p><strong>(1/2)<sup>13</sup></strong> is the correct answer to question (2). If you call a coin in the air, there's 1 in 2 chance you'll win the toss. Out of 14 tosses, the chance that <em>either</em> the NFC will win the toss 14 times <em>or</em> the AFC will win the toss 14 times is: (1/2)<sup>14</sup> + (1/2)<sup>14</sup> = (1/2)<sup>13</sup>.</p>

<p>The last situation is much more difficult to calculate, and similar questions are often the cause for much surprise. For example, if you toss a coin 20 times, do you think it's likely or unlikely that you'll get a string of 5 heads in a row? It seems like this should be unlikely. After all, the probability of tossing a coin 5 times, and ending up with heads every time is quite small: (1/2)<sup>5</sup> = 1/32  (approx. 3%). Believe it or not, the actual probability is around 25%.<sup>2</sup></p>

<p>How are these probabilities found? One solution is a rather nasty recursive formula.</p>

<blockquote><p>  A similar recursion can be given to calculate the probability that in <em>n</em> fair coin tosses a run of <em>r</em> heads or <em>r</em> tails occurs. In this case, we say that the tossing process is in state <em>(i, k)</em> when there are <em>k</em> tosses still to go and the last <em>i</em> tosses all showed the same outcome but so far no run of <em>r</em> heads or <em>r</em> tails has occurred. The probability <em>v<sub>k</sub>(i)</em> is defined as</p>

<p>  v<sub>k</sub>(i) = the probability of getting a run of <em>r</em> heads or <em>r</em> tails during <em>n</em> tosses when the current state of the tossing process is <em>(i, k)</em>.</p>

<p>The probability <em>v<sub>n-1</sub>(1)</em> is being sought (why?). Verify for yourself that the following recursion applies for k = 1,2,...,<em>n</em>.</p>

<p>  v<sub>k</sub> = 0.5*v<sub>k-1</sub>(i + 1) + 0.5*v<sub>k-1</sub>(1) for i =,...,r - 1.</p>

<p>The boundary conditions are <em>v<sub>0</sub>(i) = 0</em> for <em>1 &lt;= i &lt;= r -1</em> and <em>v<sub>j</sub>(r) = 1</em> for <em>0 &lt;= j &lt;= n - 1</em>.<sup>3</sup></p></blockquote>

<p>I'm actually not sure why we're looking for <em>v<sub>n-1</sub>(1)</em> as opposed to <em>v<sub>n</sub>(0)</em>. I tested it for a few values, and those expressions seem to be equal.<sup>4</sup> In any case, the formula is dense, but you can see the logic behind it. If you're in the midst of a streak of heads, and your next flip comes up heads, your state is now <em>(i+1, k-1)</em>. That is, your streak has increased, but your tosses to go has decreased. This explains the first half of the formula: <em>0.5*v<sub>k-1</sub>(i + 1)</em>. The other case is that you're in the midst of a streak of heads, but then you get a tail, so your state becomes <em>(1, k-1)</em>. That is, you now have a streak of 1 tail, and your total number of tosses to go decrements by one. This explains the last half of the equation. The equation then branches out like a tree, solving for each possibility along the way. Here's a bit of Scheme that implements this:</p>

<p>``` scheme An Exact Solution in Scheme
(define (coin-streak n r)</p>

<pre><code>(define (cs-helper k i)
  (cond ((and (&lt;= 1 i) (&lt;= i (- r 1)) (= k 0)) 0)
        ((and (&lt;= 0 k) (&lt;= k (- n 1)) (= i r)) 1)
        (else (+
               (* (/ 1 2) (ct-string r n (- k 1) (+ i 1)))
               (* (/ 1 2) (ct-string r n (- k 1) 1 ))))
        ))
(cs-helper (- n 1) 1))
</code></pre>

<p>```</p>

<p>Notice that this problem quickly becomes intractable for large values of <em>n</em>. Each call branches into two different calls, giving an exponential growth (props to the first person who posts a tail recursive memoization). This is why I prefer solving this by simulation. What we need to do is simulate 45 coin flips, and check if we've encountered a string of 14 heads or 14 tails. Do this, say, 100,000 times and see how often this event occurs.</p>

<p>``` python ctsim.py: An Approximation by Simulation in Python</p>

<h1>!/usr/bin/python -O</h1>

<p>import random
import sys</p>

<p>STREAK_LEN  = int(sys.argv[1])
TOSSES      = int(sys.argv[2])
TRIALS      = int(sys.argv[3])</p>

<p>def simulation(trials, tosses, streak):</p>

<pre><code>''' Simulates *trials* trials of *tosses* tosses and returns the
    fraction of trials that contained at least one streak
    of *streak* or higher.
'''

def run_trial():
    ''' Flips a coin *tosses* times and returns True if a streak of
        *streak* length is encountered.
    '''
    cur_streak = 1      # Length of the current streak.
    prev_outcome = None # Outcome of a previous toss.
    # Simulate the tosses.
    for toss in range(tosses):
        outcome = random.randint(0,1)
        # If the last toss is the same as the current toss,
        # increment the length of the current streak.
        if outcome == prev_outcome:
            cur_streak += 1
        else:
            cur_streak = 1

        # If the current streak is equal to the target
        # length, return True
        if cur_streak == streak:
            return True

        prev_outcome = outcome

    return False

streak_count = 0
# Simulate all the trials, and keep track of how many had
# a streak.
for trial in range(trials):
    had_a_streak = run_trial()
    if had_a_streak:
        streak_count += 1

return streak_count / float(trials)
</code></pre>

<p>if <strong>name</strong> == "<strong>main</strong>":</p>

<pre><code>print simulation(TRIALS, TOSSES, STREAK_LEN)
</code></pre>

<p>```</p>

<p>We can now simulate the Super Bowl situation by looking for a streak of 14 wins out of 45 tosses with 100,000 simulations.</p>

<p><code>bash ctsim.py Usage
% ./ctsim.py 14 45 100000
0.00202
</code></p>

<p>So, the probability of this happening is <strong>0.00202</strong> or around <strong>0.2%</strong>. This is still tiny, but not as small as (1/2)<sup>13</sup> (approx. 0.00012 or 0.012%).</p>

<h2>Notes:</h2>

<ol>
<li>Even this is slightly ambiguous. The exact question that we'll be looking at is: What is the probability that one team will have at least one winning streak of at least 14 tosses.</li>
<li>Tijms, H. (2010). Understanding probability: Chance rules in everyday life. (2 ed.). Cambridge, UK: Cambridge University Press.</li>
<li>Ibid.</li>
<li>Perhaps the equation <em>v<sub>n</sub>(0)</em> is technically undefined. That is, <em>i</em> cannot equal 0 because you must have a streak of at least 1 head or 1 tail. Nevertheless, it looks like the formula still works for this technically undefined state.</li>
</ol>

]]></content>
  </entry>
  
</feed>
